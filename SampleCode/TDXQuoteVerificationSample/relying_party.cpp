#include <stdio.h>
#include <vector>
#include <string>
#include <assert.h>
#include <fstream>
#include <iterator>
#include <regex>
#include <unistd.h>
#include "sgx_ql_quote.h"
#include "sgx_dcap_quoteverify.h"
#include "sgx_default_quote_provider.h"
#include "sgx_dcap_qal.h"
#include "jwt-cpp/jwt.h"

using namespace std;

string tdx_policy = "Policies/tenant_td_policy.jwt";
string &g_tenant_policy = tdx_policy;

int verify_appraisal_result(vector<uint8_t> appraisal_result, vector<uint8_t> tenant_identity_policy, bool verbose = false, bool audit_policy = false)
{
    quote3_error_t dcap_ret = SGX_QL_ERROR_UNEXPECTED;
    string appraisal_result_json;

    // read appraial result from token
    {
        string jwt_str(appraisal_result.begin(), appraisal_result.end());
        auto decoded = jwt::decode(jwt_str);
        appraisal_result_json = decoded.get_payload_claim("appraisal_result").to_json().to_str();
        if (verbose) {
            fprintf(stdout, "Info: json payload: %s\n", appraisal_result_json.c_str());
        }
        if (appraisal_result_json.find("\"overall_appraisal_result\":1") != string::npos) {
            fprintf(stdout, "Info: appraisal result: success\n");
        }
        else {
            fprintf(stderr, "Error: appraisal result: failure\n");
            fprintf(stderr, "Appraisal result:%s\n", appraisal_result_json.c_str());
        }
    }

    if (audit_policy)
    {
        // appraisal result verification
        tee_policy_bundle_t bundle;
        tee_policy_auth_result_t auth_result = TEE_AUTH_FAILURE;

        memset(&bundle, 0, sizeof(tee_policy_bundle_t));
        bundle.p_tenant_identity_policy = (const uint8_t*)&tenant_identity_policy[0];

        // get fmspc from token
        const uint32_t fmspc_len = 6;
        const uint8_t fmspc[fmspc_len] = {0x00};
        std::regex fmspc_regex("fmspc\":\"([0-9a-fA-F]+)\"");
        std::smatch fmspc_match;
        if (std::regex_search(appraisal_result_json, fmspc_match, fmspc_regex)) {
            string fmspc_str = fmspc_match[1].str();
            if (fmspc_str.size() != fmspc_len*2) {
                fprintf(stderr, "Error: fmspc size is incorrect\n");
                return -1;
            }
            for (int i = 0; i < fmspc_len; i++) {
                sscanf(fmspc_str.substr(i*2, 2).c_str(), "%02x", &fmspc[i]);
            }
        }
        else {
            fprintf(stderr, "Error: fmspc not found\n");
            return -1;
        }

        // tee_get_default_platform_policy
        uint8_t *p_platform_policy;
        uint32_t p_platform_policy_size;

        dcap_ret = tee_get_default_platform_policy(fmspc, fmspc_len, &p_platform_policy, &p_platform_policy_size);
        if (dcap_ret != SGX_QL_SUCCESS) {
            fprintf(stderr, "Error: tee_get_default_platform_policy() failed: 0x%04x\n", dcap_ret);
            return -1;
        }

        bundle.platform_policy.pt = CUSTOMIZED;
        bundle.platform_policy.p_policy = p_platform_policy;

        // check whether the input policies are used in the appraisal process
        dcap_ret = tee_authenticate_appraisal_result(&appraisal_result[0], &bundle, &auth_result);

        // free platform policy
        tee_free_platform_policy(p_platform_policy);

        if (dcap_ret != SGX_QL_SUCCESS) {
            fprintf(stderr, "Error: tee_authenticate_appraisal_result() failed: 0x%04x\n", dcap_ret);
            return -1;
        }

        if (auth_result != TEE_AUTH_FAILURE) {
            fprintf(stdout, "Info: result generated by expected appraisal policys: success\n");
        }
        else {
            fprintf(stderr, "Error: appraisal_result audit failed: 0x%04x%\n", auth_result);
            return -1;
        }

    }

    return 0;
}


// Application entry
int main(int argc, char *argv[])
{
    int opt;
    int verbose = 0;
    int audit_policy = 0;

    while ((opt = getopt(argc, argv, "va")) != -1) {
        switch (opt) {
            case 'v': 
                {
                    verbose = 1;
                    break;
                }
            case 'a':
                {
                    audit_policy = 1;
                    break;
                }
            default:
                fprintf(stderr, "Usage: %s [-v] [-a] \n", argv[0]);
                return 1;
        }
    }

    string line;
    while (line.size() == 0) {
        getline(cin, line);
    }

    ifstream file(g_tenant_policy, ios::binary);
    vector<uint8_t> tenant_policy((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
    tenant_policy.push_back('\0');

    vector<uint8_t> jwt_token = vector<uint8_t>(line.begin(), line.end());
    int ret = verify_appraisal_result(jwt_token, tenant_policy, verbose, audit_policy);

    return ret;
}
